// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	types "github.com/cloud-club/Aviator-service/types/server"
	mock "github.com/stretchr/testify/mock"
)

// MockExampleServerInterface is an autogenerated mock type for the ExampleServerInterface type
type MockExampleServerInterface struct {
	mock.Mock
}

type MockExampleServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExampleServerInterface) EXPECT() *MockExampleServerInterface_Expecter {
	return &MockExampleServerInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: url, request
func (_m *MockExampleServerInterface) Create(url string, request *types.CreateServerRequest) (*types.CreateServerResponse, error) {
	ret := _m.Called(url, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *types.CreateServerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *types.CreateServerRequest) (*types.CreateServerResponse, error)); ok {
		return rf(url, request)
	}
	if rf, ok := ret.Get(0).(func(string, *types.CreateServerRequest) *types.CreateServerResponse); ok {
		r0 = rf(url, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CreateServerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *types.CreateServerRequest) error); ok {
		r1 = rf(url, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExampleServerInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockExampleServerInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - url string
//   - request *types.CreateServerRequest
func (_e *MockExampleServerInterface_Expecter) Create(url interface{}, request interface{}) *MockExampleServerInterface_Create_Call {
	return &MockExampleServerInterface_Create_Call{Call: _e.mock.On("Create", url, request)}
}

func (_c *MockExampleServerInterface_Create_Call) Run(run func(url string, request *types.CreateServerRequest)) *MockExampleServerInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*types.CreateServerRequest))
	})
	return _c
}

func (_c *MockExampleServerInterface_Create_Call) Return(_a0 *types.CreateServerResponse, _a1 error) *MockExampleServerInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExampleServerInterface_Create_Call) RunAndReturn(run func(string, *types.CreateServerRequest) (*types.CreateServerResponse, error)) *MockExampleServerInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: url
func (_m *MockExampleServerInterface) Delete(url string) error {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExampleServerInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockExampleServerInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - url string
func (_e *MockExampleServerInterface_Expecter) Delete(url interface{}) *MockExampleServerInterface_Delete_Call {
	return &MockExampleServerInterface_Delete_Call{Call: _e.mock.On("Delete", url)}
}

func (_c *MockExampleServerInterface_Delete_Call) Run(run func(url string)) *MockExampleServerInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockExampleServerInterface_Delete_Call) Return(_a0 error) *MockExampleServerInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExampleServerInterface_Delete_Call) RunAndReturn(run func(string) error) *MockExampleServerInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: url
func (_m *MockExampleServerInterface) Get(url string) error {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExampleServerInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockExampleServerInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - url string
func (_e *MockExampleServerInterface_Expecter) Get(url interface{}) *MockExampleServerInterface_Get_Call {
	return &MockExampleServerInterface_Get_Call{Call: _e.mock.On("Get", url)}
}

func (_c *MockExampleServerInterface_Get_Call) Run(run func(url string)) *MockExampleServerInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockExampleServerInterface_Get_Call) Return(_a0 error) *MockExampleServerInterface_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExampleServerInterface_Get_Call) RunAndReturn(run func(string) error) *MockExampleServerInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: url
func (_m *MockExampleServerInterface) List(url string) error {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExampleServerInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockExampleServerInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - url string
func (_e *MockExampleServerInterface_Expecter) List(url interface{}) *MockExampleServerInterface_List_Call {
	return &MockExampleServerInterface_List_Call{Call: _e.mock.On("List", url)}
}

func (_c *MockExampleServerInterface_List_Call) Run(run func(url string)) *MockExampleServerInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockExampleServerInterface_List_Call) Return(_a0 error) *MockExampleServerInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExampleServerInterface_List_Call) RunAndReturn(run func(string) error) *MockExampleServerInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: url
func (_m *MockExampleServerInterface) Update(url string) error {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExampleServerInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockExampleServerInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - url string
func (_e *MockExampleServerInterface_Expecter) Update(url interface{}) *MockExampleServerInterface_Update_Call {
	return &MockExampleServerInterface_Update_Call{Call: _e.mock.On("Update", url)}
}

func (_c *MockExampleServerInterface_Update_Call) Run(run func(url string)) *MockExampleServerInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockExampleServerInterface_Update_Call) Return(_a0 error) *MockExampleServerInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExampleServerInterface_Update_Call) RunAndReturn(run func(string) error) *MockExampleServerInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExampleServerInterface creates a new instance of MockExampleServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExampleServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExampleServerInterface {
	mock := &MockExampleServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
